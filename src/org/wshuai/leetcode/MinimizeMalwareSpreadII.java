package org.wshuai.leetcode;

import org.junit.Test;

import java.util.*;

/**
 * Created by Wei on 11/15/2019.
 * #928 https://leetcode.com/problems/minimize-malware-spread-ii/
 */
public class MinimizeMalwareSpreadII {
	public int minMalwareSpread(int[][] graph, int[] initial) {
		Map<Integer, List<Integer>> map = new HashMap<>();
		int N = graph.length;
		boolean[] visited = new boolean[N];
		LinkedList<Integer> queue = new LinkedList<>();
		Set<Integer> set = new HashSet<>();
		Arrays.sort(initial);
		for(int i : initial){
			set.add(i);
		}
		for(int i : initial){
			queue.offerLast(i);
			visited[i] = true;
			while(!queue.isEmpty()){
				int j = queue.pollFirst();
				if(set.contains(j)){
					continue;
				}
				map.putIfAbsent(i, new ArrayList<>());
				map.get(j).add(i);
				for(int k = 0; k < N; k++){
					if(graph[j][k] == 1 && !visited[k]){
						visited[k] = true;
						queue.offerLast(k);
					}
				}
			}
		}
		int max = -1;
		int[] count = new int[N];
		for(Map.Entry<Integer, List<Integer>> entry : map.entrySet()){
			List<Integer> val = entry.getValue();
			if(val.size() == 1){
				count[val.get(0)]++;
				max = Math.max(count[val.get(0)], max);
			}
		}
		if(max == -1){
			return initial[0];
		}
		int res = -1;
		for(int i = 0; i < N; i++){
			if(count[i] == max){
				res = i;
				break;
			}
		}
		return res;
	}

	@Test
	public void testcase(){
		MinimizeMalwareSpreadII mms = new MinimizeMalwareSpreadII();
	}
}
